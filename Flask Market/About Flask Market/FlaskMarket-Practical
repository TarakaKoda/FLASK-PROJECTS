                                                                                                             03-05-2023
                                       E-COMMERCE WEBSITE USING FLASK
                                                                                                             06:43:45PM

************************************************************************************************************************

                                             PART-1: Introduction
* Getting Started with Flask:

  - use terminal to install flask into python.
> pip install flask

  - To if its installed correctly.
> python
> import flask
  - if this does not give any error then its installed correctly.
> exit()

------------------------------------------------------------------------------------------------------------------------

> set up a virtual environment (optional)
> now create a directory (e.g. FlaskMarket)
> create a new file (e.g. market.py)

------------------------------------------------------------------------------------------------------------------------

Basic web applications from the flask documentation:
from flask import Flask

app = Flask(__name__)


@app.route("/")
def hello_world():
    return "<p>Hello, World!</p>"

> So what did that code do?

1. First we imported the Flask class. An instance of this class will be our WSGI application.

2. Next we create an instance of this class. The first argument is the name of the application’s module or package.
   __name__ is a convenient shortcut for this that is appropriate for most cases. This is needed so that Flask knows
   where to look for resources such as templates and static files.

3. We then use the route() decorator to tell Flask what URL should trigger our function.

4. The function returns the message we want to display in the user’s browser. The default content type is HTML,
   so HTML in the string will be rendered by the browser.

------------------------------------------------------------------------------------------------------------------------

- creating routes
  - home_page
  - about_page

------------------------------------------------------------------------------------------------------------------------

- market.py

from flask import Flask

app = Flask(__name__)

@app.route("/")
@app.route("/home/<username>")
def home_page(username):
    return f"""<h1>Home Page</h1>
    <p>This is our Home Page {username}</p>
    """

@app.route("/about")
def about_page():
    return "<h1>About Page</h1>"


if __name__ == "__main__":
    app.run(debug=True)

------------------------------------------------------------------------------------------------------------------------

                                        *End of PART-1: INTRODUCTION*

************************************************************************************************************************
                                                                                                             03-05-2023
                                          PART-2: STYLING AND TEMPLATES
                                                                                                             08:03:19PM

------------------------------------------------------------------------------------------------------------------------

- market.py
- import render_template
- create a directory: templates
- inside that create a home template: home.html
- use the render_template to render the "home.html" in home_page function.

------------------------------------------------------------------------------------------------------------------------

- market.py

from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
@app.route("/home")
def home_page():
    return render_template("home.html")



if __name__ == "__main__":
    app.run(debug=True)

------------------------------------------------------------------------------------------------------------------------

- home.html

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

    <title>Home Page</title>
  </head>
  <body>
    <nav class="navbar navbar-expand-md navbar-dark bg-dark">
      <a class="navbar-brand" href="#">Taraka's Market &#x1F6D2</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
                <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Market</a>
            </li>
        </ul>
        <ul class="navbar-nav">
            <li class="nav-item">
                <a class="nav-link" href="#">Login</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Register</a>
            </li>
        </ul>
      </div>
    </nav>
    <h1>Home Page</h1>

    <!-- Optional JavaScript; choose one of the two! -->

    <!-- Option 1: jQuery and Bootstrap Bundle (includes Popper) -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>

    <!-- Option 2: jQuery, Popper.js, and Bootstrap JS
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js" integrity="sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s" crossorigin="anonymous"></script>
    -->
  </body>
  <style>
      body {
        background-color: #212121;
        color: white
      }
  </style>
</html>

------------------------------------------------------------------------------------------------------------------------

- used Bootstrap 4.5 starter template for styling our home template
- added title to the html page: Home Page
- added navigation bar
- added brand("Tarak's Market &#x1F6D2")
  - To display a cart emoji in HTML, you can use the Unicode character as well by using its HTML entity code. The entity
    code for the cart symbol is &#x1F6D2;. You can simply insert this code in your HTML code where you want the cart
    emoji to appear.
- adding links to the navigation bar
  - Home
  - Market
  - Login
  - Register
- changing the color of the background to dark mode

------------------------------------------------------------------------------------------------------------------------

                                         *End of PART-2: STYLING AND TEMPLATES*

************************************************************************************************************************
                                                                                                             03-05-2023
                                          PART-3: SENDING DATA TO TEMPLATES
                                                                                                             10:20:50PM

------------------------------------------------------------------------------------------------------------------------

- create a new route for the market page
- use the same code from the home template and modify it
  - market.py

- now create a template in templates directory for that market route
  - templates directory
  - market.html

- create a list of items and pass it as an argument to render_template

- create a tables using the html <table></table>

- now add items to the market template using jinja2
  - using {% for example in examples %}{% endfor %}
    - for better understanding checkout the code given below

- now add a new column for more info and purchase the item

------------------------------------------------------------------------------------------------------------------------

- market.py

from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
@app.route("/home")
def home_page():
    return render_template("home.html")


@app.route("/market")
def market_page():
    items = [
        {'id': 1, 'name': 'Phone', 'barcode': '893212299897', 'price': 500},
        {'id': 2, 'name': 'Laptop', 'barcode': '123985473165', 'price': 900},
        {'id': 3, 'name': 'Keyboard', 'barcode': '231985128446', 'price': 150}
    ]
    return render_template("market.html", items=items)


if __name__ == "__main__":
    app.run(debug=True)

------------------------------------------------------------------------------------------------------------------------

- market.html

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

    <title>Market Page</title>
  </head>
  <body>
    <nav class="navbar navbar-expand-md navbar-dark bg-dark">
      <a class="navbar-brand" href="#">Taraka's Market &#x1F6D2</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
                <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Market</a>
            </li>
        </ul>
        <ul class="navbar-nav">
            <li class="nav-item">
                <a class="nav-link" href="#">Login</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Register</a>
            </li>
        </ul>
      </div>
    </nav>
    <h1>Market Page</h1>
    <table class="table table-hover table-dark">
        <thead>
            <tr>
                <!-- Your Columns HERE -->
                <th scope="col">ID</th>
                <th scope="col">Name</th>
                <th scope="col">Barcode</th>
                <th scope="col">Price</th>
                <th scope="col">Options</th>
            </tr>
        </thead>
        <tbody>
            <!-- Your rows inside the table HERE: -->
                {% for item in items %}
                    <tr>
                        <td>{{ item.id }}</td>
                        <td>{{ item.name }}</td>
                        <td>{{ item.barcode }}</td>
                        <td>₹ {{ item.price }}</td>
                        <td>
                            <button class="btn btn-outline btn-info">More Info</button>
                            <button class="btn btn-outline btn-success">Purchase This Item</button>
                        </td>
                    </tr>
                {% endfor %}
        </tbody>
    </table>

    <!-- Optional JavaScript; choose one of the two! -->

    <!-- Option 1: jQuery and Bootstrap Bundle (includes Popper) -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>

    <!-- Option 2: jQuery, Popper.js, and Bootstrap JS
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js" integrity="sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s" crossorigin="anonymous"></script>
    -->
  </body>
  <style>
      body {
        background-color: #212121;
        color: white
      }
  </style>
</html>

------------------------------------------------------------------------------------------------------------------------

                                         *End of PART-3: SENDING DATA TO TEMPLATES*

************************************************************************************************************************
                                                                                                             03-05-2023
                                          PART-4 TEMPLATE INHERITANCE
                                                                                                             11:50:16PM

------------------------------------------------------------------------------------------------------------------------

- create a base template in the templates directory
  - base.html
  - now add the common/repeating code to this base template (eg. navigation bar, dark mode code)
- now refactor the code in the home and market templates
- now import url_for from flask
  - use this to link the links in the navigation bar(Home, Market)

------------------------------------------------------------------------------------------------------------------------

- market.py

from flask import Flask, render_template, url_for

app = Flask(__name__)

@app.route("/")
@app.route("/home")
def home_page():
    return render_template("home.html", title="Home page")


@app.route("/market")
def market_page():
    items = [
        {'id': 1, 'name': 'Phone', 'barcode': '893212299897', 'price': 500},
        {'id': 2, 'name': 'Laptop', 'barcode': '123985473165', 'price': 900},
        {'id': 3, 'name': 'Keyboard', 'barcode': '231985128446', 'price': 150}
    ]
    return render_template("market.html", items=items, title="Market Page")


if __name__ == "__main__":
    app.run(debug=True)

------------------------------------------------------------------------------------------------------------------------

- home.html

{% extends "base.html" %}
{% block content %}
    This is our content for the Home Page
{% endblock content %}

------------------------------------------------------------------------------------------------------------------------

- market.html

{% extends "base.html" %}
{% block content %}
    <h1>Market Page</h1>
    <table class="table table-hover table-dark">
        <thead>
            <tr>
                <!-- Your Columns HERE -->
                <th scope="col">ID</th>
                <th scope="col">Name</th>
                <th scope="col">Barcode</th>
                <th scope="col">Price</th>
                <th scope="col">Options</th>
            </tr>
        </thead>
        <tbody>
            <!-- Your rows inside the table HERE: -->
                {% for item in items %}
                    <tr>
                        <td>{{ item.id }}</td>
                        <td>{{ item.name }}</td>
                        <td>{{ item.barcode }}</td>
                        <td>₹ {{ item.price }}</td>
                        <td>
                            <button class="btn btn-outline btn-info">More Info</button>
                            <button class="btn btn-outline btn-success">Purchase This Item</button>
                        </td>
                    </tr>
                {% endfor %}
        </tbody>
    </table>
{% endblock content %}

------------------------------------------------------------------------------------------------------------------------

- base.html

<!doctype html>
<html lang="en">
   <head>
      <!-- Required meta tags -->
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
      <!-- Bootstrap CSS -->
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
      <title>{{ title }}</title>
   </head>
   <body>
      <!-- Navbar here -->
      <nav class="navbar navbar-expand-md navbar-dark bg-dark">
          <a class="navbar-brand" href="#">Taraka's Market &#x1F6D2</a>
          <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                    <a class="nav-link" href="{{ url_for('home_page') }}">Home <span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('market_page') }}">Market</a>
                </li>
            </ul>
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="#">Login</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Register</a>
                </li>
            </ul>
          </div>
      </nav>
      <!-- Future Content here -->
         {% block content %}

         {% endblock content %}
      <!-- Optional JavaScript -->
      <!-- jQuery first, then Popper.js, then Bootstrap JS -->
      <script src='https://kit.fontawesome.com/a076d05399.js'></script>
      <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
      <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
      <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js" integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV" crossorigin="anonymous"></script>
   </body>
   <style>
      body {
      background-color: #212121;
      color: white
      }
   </style>
</html>

------------------------------------------------------------------------------------------------------------------------

                                         *End of PART-4: TEMPLATE INHERITANCE*

************************************************************************************************************************
                                                                                                             04-05-2023
                                          PART-5: MODELS AND DATABASE
                                                                                                             10:54:36AM

------------------------------------------------------------------------------------------------------------------------

- for siting a database to the project we need to install a package called sqlalchemy
- open terminal
  - pipenv install flask-sqlalchemy

- after that import that package in the market.py
  - from flask_sqlalchemy import SQLAlchemy

- now create an instance as "db" and pass the app as an augment to SQLAlchemy
  - db = SQLAlchemy(app)

- now we need to create model(table) using the instance of the SQLAlchemy(db)
- we can create mode using classes
  - create a class Item

- now we need to config app with a database uri(uniform resource identifier) in the market.py
- open terminal and create a database

------------------------------------------------------------------------------------------------------------------------

market.py
from flask import Flask, render_template, url_for
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///market.db"
db = SQLAlchemy(app)


class Item(db.Model):
    id = db.Column(db.Integer(), primary_key=True)
    name =  db.Column(db.String(length=30), nullable=False, unique=True)
    price = db.Column(db.Integer(), nullable=False)
    barcode = db.Column(db.String(length=12), nullable=False, unique=True)
    description = db.Column(db.String(length=1024), nullable=False, unique=True)

    def __repr__(self):
        return f"Item({self.name}, {self.price})"


@app.route("/")
@app.route("/home")
def home_page():
    return render_template("home.html", title="Home page")


@app.route("/market")
def market_page():
    items = Item.query.all()
    return render_template("market.html", items=items, title="Market Page")


if __name__ == "__main__":
    app.run(debug=True)

------------------------------------------------------------------------------------------------------------------------

- terminal commands
>>> from market import app, db
>>> app.app_context().push()
>>> db.create_all()

- this will create a directory(instance) in the current project in that market.db(database) will be created

- now we can import Item class from the market and create instances of that class which will be stored in this databse
- open terminal
>>> from market import Item
>>> item1 = Item(name="IPhone 10", price=75000, barcode="245321256578922", description="this is new IPhone 10 in the market")
>>> item2 = Item(name="IPhone 11", price=80000, barcode="235179985456654", description="this is new IPhone 11 in the market")

- now how can we add these into our database
>>> db.session.add(item1)
>>> db.session.add(item2)
>>> db.session.commit()

- this will create new table in our database
>>> Item.query.all()
[<Item 1>, <Item 2>]

- this is hard to read, to make this more readable we can define a method called __repr__ in Item class
- to check if its working, we need to re-run the app in the terminal

>>> from market import app, db
>>> app.app_context().push()

>>> from market import Item
>>> Item.query.all()
[Item(IPhone 10, 75000), Item(IPhone 11, 80000)]

- we can perform actions by iterating Item

>>> for item in Item.query.all():
        item.name
        item.price
        item.barcode
        item.description

'IPhone 10'
75000
'245321256578922'
'this is new IPhone 10 in the market'
'IPhone 11'
80000
'235179985456654'
'this is new IPhone 11 in the market'

- we can filter the items using filter_by
>>> for item in Item.query.filter_by(price=80000)
        item.name
        item.price
        item.barcode
        item.description

'IPhone 11'
80000
'235179985456654'
'this is new IPhone 11 in the market'

- now in market.py change the items = Item.query.all()

------------------------------------------------------------------------------------------------------------------------

                                         *End of PART-5: MODELS AND DATABASE*

************************************************************************************************************************
                                                                                                             04-05-2023
                                          PART-6: PROJECT RESTRUCTURE
                                                                                                             01:04:28PM

------------------------------------------------------------------------------------------------------------------------

- restructured the project
- created a new file called "run.py"
- created a package called market
  - created __init__.py it will make a directory into a package and this will executes when package is imported
  - and moved everything into that package except for run.py, and instance: market.db(our database)

------------------------------------------------------------------------------------------------------------------------

- after refactoring the project structure:

- instance
  - market.db
- market (package)
  - templates
    - home.html
    - market.html
    - base.html
  - __init__.py
  - models.py
  - routes.py
- run.py

------------------------------------------------------------------------------------------------------------------------

- run.py
from market import app


if __name__ == "__main__":
    app.run(debug=True)

------------------------------------------------------------------------------------------------------------------------

- market (package)
 - templates
   - home.html
   - market.html
   - base.html
 - __init__.py
 - models.py
 - routes.py

------------------------------------------------------------------------------------------------------------------------

 - __init__.py
   from flask import Flask
   from flask_sqlalchemy import SQLAlchemy

   app = Flask(__name__)
   app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///market.db"
   db = SQLAlchemy(app)

   from market import routes

------------------------------------------------------------------------------------------------------------------------

 - models.py
   from market import db

   class Item(db.Model):
       id = db.Column(db.Integer(), primary_key=True)
       name =  db.Column(db.String(length=30), nullable=False, unique=True)
       price = db.Column(db.Integer(), nullable=False)
       barcode = db.Column(db.String(length=12), nullable=False, unique=True)
       description = db.Column(db.String(length=1024), nullable=False, unique=True)

       def __repr__(self):
           return f"Item({self.name}, {self.price})"

------------------------------------------------------------------------------------------------------------------------

 - routes.py
   from flask import render_template, url_for
   from market.models import Item
   from market import app



   @app.route("/")
   @app.route("/home")
   def home_page():
       return render_template("home.html", title="Home page")


   @app.route("/market")
   def market_page():
       items = Item.query.all()
       return render_template("market.html", items=items, title="Market Page")

------------------------------------------------------------------------------------------------------------------------

                                         *End of PART-6: PROJECT RESTRUCTURE*

************************************************************************************************************************








