                                                                                                             17-04-2023
                                  FUll-FEATURED WEB APPLICATION USING FLASK
                                                                                                             05:20:32PM

************************************************************************************************************************

                                             PART-1: GETTING STARTED
* Getting Started with Flask:

  - use terminal to install flask into python.
> pip install flask

  - To if its installed correctly.
> python
> import flask
  - if this does not give any error then its installed correctly.
> exit()

************************************************************************************************************************

> set up a virtual environment (optional)
> now create a directory (e.g. Flask_Blog)
> create a new file (e.g. flaskblog.py)

************************************************************************************************************************

Basic web applications:
from flask import Flask

app = Flask(__name__)


@app.route("/")
def hello_world():
    return "<p>Hello, World!</p>"

> So what did that code do?

1. First we imported the Flask class. An instance of this class will be our WSGI application.

2. Next we create an instance of this class. The first argument is the name of the application’s module or package.
   __name__ is a convenient shortcut for this that is appropriate for most cases. This is needed so that Flask knows
   where to look for resources such as templates and static files.

3. We then use the route() decorator to tell Flask what URL should trigger our function.

4. The function returns the message we want to display in the user’s browser. The default content type is HTML,
   so HTML in the string will be rendered by the browser.

************************************************************************************************************************

> Created Two new routes to your flask application:

- The @app.route("/") decorator tells Flask to map the / or localhost URL to the home_page() function.
  @app.route("/")
  def home_page():
      return f"<h1>Home Page</h1>" \
             f"<h1>Welcome to our home page</h1>"

- When a user navigates to http://localhost:5000/about, Flask will call the home_page() function and return the string
  <h1>Home Page</h1> \ <h1>Welcome to our home page</h1> as the response.


- The @app.route("/about") decorator tells Flask to map the /about URL to the about_page() function.
  @app.route("/about")
  def about_page():
      return f"<h1>This is our about page</h1>"

- When a user navigates to http://localhost:5000/about, Flask will call the about_page() function and return the string
  <h1>This is our about page</h1> as the response.

************************************************************************************************************************

  if __name__ == "__main__":
    app.run(debug=True)

- This code block is commonly used in Flask applications to start the development server when the app.py file is run
  directly from the command line.

- The if __name__ == "__main__": statement is used to ensure that the code inside the block is only executed when the
  script is run directly, and not when it is imported as a module.

- The app.run(debug=True) method starts the Flask development server, with the debug mode enabled. The debug mode
  automatically restarts the server whenever a code change is detected, making it easy to make changes and test the
  application in a development environment.

                                       *End of PART-1: GETTING STARTED*

************************************************************************************************************************
                                                                                                             18-04-2023
                                           PART-2: TEMPLATES
                                                                                                             02:00:19PM

> How to use templates to return more complex code using html and css and how to pass variables to our web pages:

> Create a templates directory in the main flask application and create templates:
> home.html
> about.html

************************************************************************************************************************

                                            BASIC HTML PAGES
- home.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Flask Blog</title>
</head>
<body>
    <h1>Home Page</h1>
</body>
</html>

************************************************************************************************************************

- about.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Flask Blog</title>
</head>
<body>
    <h1>About Page</h1>
</body>
</html>

************************************************************************************************************************

- We can render templates using the flask butil-in method: render_template()
from flask import Flask, render_template
app = Flask(__name__)


@app.route("/")
@app.route("home")
def home():
    return render_template("home.html")


@app.route("/about")
def about():
    return render_template("about.html")

if __name__ == "__main__":
    app.run(debug=True)

************************************************************************************************************************

> Adding variables or dummy data to our html files

from flask import FLASK, rander_template
app = FLASK(__name__)

posts = [
    {
        "author": "Srinivas Koda",
        "title": "Blog Post 1",
        "content": "This is my First Post",
        "date": "June 30, 2023",
        "contact": "srinivaskoda@gmail.com"
    },
    {
        "author": "Naga Pavan",
        "title": "Blog Post 2"
        "content": "This is my Second Post",
        "date": "March 09, 2023",
        "contact": "nagapavan@gmail.com"
    }
]


@app.route("/")
@app.route("/home")
def home():
    return rander_template("home.html", posts=posts)


@app.route("/about")
def about():
    return rander_template("about.html",title="About")

************************************************************************************************************************

- Using Jinja2 for looping the dummy data
- home.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Flask Blog</title>
</head>
<body>
    {% for post in posts %}
        <h1>{{ post.title }}</h1>
        <p>By {{ post.name }} on {{post.date}}</p>
        <p>{{ post.content }}</p>
        <p>For contact: {{ post.contact }}</p>
    {% endfor %}
</body>
</html>

************************************************************************************************************************

- Using Jinja2 for if else conditions:
- about.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    {% if title %}
        <title>Flask Blog - {{ title }}</title>
    {% else %}
         <title>Flask Blog</title>
    {% endif %}
</head>
<body>
    <h1>About Page</h1>
</body>
</html>

************************************************************************************************************************

- Using the Concept of Template Inheritance to minimize the code:
- create a new template in our templates directory called "layout.html"

                                               PARENT TEMPLATE
- layout.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    {% if title %}
        <title>Flask Blog - {{ title }}</title>
    {% else %}
         <title>Flask Blog</title>
    {% endif %}
</head>
<body>
    {% block content %}{% endblock %}
</body>
</html>

************************************************************************************************************************

                                              CHILD TEMPLATES

- home.html:

  {% extends "layout.html" %}
  {% block content %}
        {% for post in posts %}
            <h1>{{ post.title }}</h1>
            <p>By {{ post.name }} on {{post.date}}</p>
            <p>{{ post.content }}</p>
            <p>For contact: {{ post.contact }}</p>
        {% endfor %}
  {% endblock content %}


- about.html:

  {% extends "layout.html" %}
  {% block content %}
      <h1>About Page</h1>
  {% endblock content %}

- For more information checkout the main and layout.html template where more html, css, javascript and bootstrap added.

                                      *End of PART-2: TEMPLATES*

************************************************************************************************************************
                                                                                                             19-04-2023
                                       PART-2: FORMS AND VALIDATIONS
                                                                                                             10:35:30AM

- installing wt forms extension
  pip install flask-wtf
  - This extension provides a simple way to define and validate forms

- create a file in main directory as forms.py

************************************************************************************************************************

- forms.py

from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, BooleanField
from wtforms.validators import DataRequired, Length, Email, equal_to


class RegisterForm(FlaskForm):
    username = StringField("Username", validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField("Email", validators=[DataRequired(), Email()])
    password = PasswordField("Password", validators=[DataRequired()])
    confirm_password = PasswordField("Confirm Password",[DataRequired(), equal_to("password")])
    submit = SubmitField("Sign up")


class LoginFrom(FlaskForm):
    email = StringField("Email", validators=[DataRequired(), Email()])
    password = PasswordField("Password", validators=[DataRequired()])
    remember = BooleanField("Remember Me")
    submit = SubmitField("Login")

************************************************************************************************************************

- Added Secret Key to our flaskblog.py

from flask import Flask, render_template, url_for
from forms import RegisterForm, LoginForm
app = Flask(__name__)

app.config["SECRET_KEY"] = "xxxx86d816c4c0484ffa4e3dc43fxxxx"      # You can generate secret key using secrets module
                                                                  # import secrets
                                                                  # secrets.token_hex(16)
                                                                  # xxxx86d816c4c0484ffa4e3dc43fxxxx"

posts = [
    {
    "username": "Srinivas koda",
    "title": "Blog Post 1"
    "content": "This is my first post",
    "contact": "srinivaskoda@gmail.com",
    "date": "June 30, 2023"
    },
    {
    "username": "Naga Pavan"
    "title": "Blog Post 2",
    "content": "This is my second post",
    "contact": "nagapavan@gmail.com"
    "date": "June 30, 2023"

    }
]


@app.route("/")
@app.route("/home")
def home():
    return render_template("home.html", posts=posts)


@app.route("/about")
def about():
    return render_template("about.html", title="About")

- added register route and login route
@app.route("/register")
def register():
    form = RegisterForm()
    return = render_template("register.html", title="Register", form=form)

@app.route("/login")
def login():
    form = LoginForm()
    return render_template("login.html", title="Login", form=form)


if __name__ == "__main__":
    app.run(debug=True)

************************************************************************************************************************

- register.html

{% extends "layout.html" %}
{% block content %}
    <div class="content-section">
        <form method="POST" action="">
            {{ form.hidden_tag() }}
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Join Our Community Of Thunderous Voices!</legend>
                <div class="form-group">
                    {{ form.username.label(class="form-control-label") }}
                    {{ form.username(class="form-control form-control-lg") }}
                </div>
                <div class="form-group">
                    {{ form.email.label(class="form-control-label") }}
                    {{ form.email(class="form-control form-control-lg") }}
                </div>
                <div class="form-group">
                    {{ form.password.label(class="form-control-label") }}
                    {{ form.password(class="form-control form-control-lg") }}
                </div>
                <div class="form-group">
                    {{ form.confirm_password.label(class="form-control-label") }}
                    {{ form.confirm_password(class="form-control form-control-lg") }}
                </div>
            </fieldset>
            <div class="form-group">
                {{ form.submit(class="btn btn-outline-warning") }}
            </div>
        </form>
    </div>
    <div class="border-top pt-3">
        <small class="text-muted">
            Already Have an Account? <a class="ml-2" href="{{ url_for('login') }}">Sign In</a>
        </small>
    </div>
{% endblock content %}

************************************************************************************************************************
- added flash message and redirect

from flask import Flask, render_template, url_for, flash, redirect
app = Flask(__name__)

app.config["SECRET_KEY"] = "xxxx86d816c4c0484ffa4e3dc43fxxxx"

posts = [
    {
    "username": "Srinivas koda",
    "title": "Blog Post 1"
    "content": "This is my first post",
    "contact": "srinivaskoda@gmail.com",
    "date": "June 30, 2023"
    },
    {
    "username": "Naga Pavan"
    "title": "Blog Post 2",
    "content": "This is my second post",
    "contact": "nagapavan@gmail.com"
    "date": "June 30, 2023"

    }
]

@app.route("/")
@app.route("/home")
def home():
    return render_template("home.html", title="Home", posts=posts)

@app.route("/about")
def about("/about"):
    return render_template("about.html", title="About")


- added flash message and redirect to home page
app.route("/register")
def register():
    form = RegisterForm()
    if form.validation_is_submit():
        flash(f"Welcome to Thunber! {form.username.data} We're thrilled to have you join us!", "success")
        return redirect(url_for("/home"))

@app.route("/login")
def login():
    return redirect_template("login.html", title="login")

if __name__ = "__main__":
    app.run(debug=True)

************************************************************************************************************************

- adding flash message to layout template so that it can display to the user next after successfully logged in.

{% with message = get_flashed_messages(with_categories=true) %}
    {% if message %}
        {% for category, message in message %}
            <div class="alert alert-{{category}}>
                {{ message }}
            </div>
        {% endfor%}
    {% endif %}
{% endwith%}

- add this above to the {% block content %} in the layout.

************************************************************************************************************************

- giving error message feedback to the user if they enter wrong data
 <div class="form-group">
{{ form.username.label(class="form-control-label") }}
{% if form.username.errors %}
    {{ form.username(class="form-control form-control-lg is-invalid") }}
    <div class="invalid-feedback">
        {% for error in form.username.errors%}
        <span>{{ error }}</span>
        {% endfor %}
    </div>
{% else %}
    {{ form.username(class="form-control form-control-lg") }}
{% endif%}
</div>

-this goes same to all the forms like login(email, password) and register(username, email, password, confirm_password) pages.

------------------------------------------------------------------------------------------------------------------------

- login template
{% extends "layout.html" %}
{% block content %}
    <div class="content-section">
        <form method="POST" action="">
            {{ form.hidden_tag() }}
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Login!</legend>
                <div class="form-group">
                    {{ form.email.label(class="form-control-label") }}
                    {% if form.email.errors %}
                        {{ form.email(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.email.errors%}
                            <span>{{ error }}</span>
                            {% endfor %}
                        </div>passwordconfirm_password
                    {% else %}
                        {{ form.email(class="form-control form-control-lg") }}
                    {% endif%}
                </div>
                <div class="form-group">
                    {{ form.password.label(class="form-control-label") }}
                    {% if form.password.errors %}
                        {{ form.password(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.password.errors%}
                            <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{ form.password(class="form-control form-control-lg") }}
                    {% endif%}
                </div>
                <div class="form-check">
                    {{ form.remember(class="form-check-input") }}
                    {{ form.remember.label(class="form-check-label") }}
                </div>
            </fieldset>
            <div class="form-group">
                {{ form.submit(class="btn border rounded btn-outline-warning") }}
            </div>
            <small class="text-mute ml-2">
                <a href="#">Forgot Password?</a>
            </small>
        </form>
    </div>
    <div class="border-top pt-3">
        <small class="text-muted">
            Need an Account? <a class="ml-2" href="{{ url_for('register') }}">Sign Up Now</a>
        </small>
    </div>
{% endblock content %}

------------------------------------------------------------------------------------------------------------------------
- checking fake login

@app.route("/login")
def login():
    form = LoginForm()
    if form.validation_is_submit():
        if form.email.data == "nagapavan@gmail.com" and form.password.data == "password":
            flash(f"Welcome to Thunder!", "success")
            return redirect(url_for("/home"))
        else:
            flash(f"Thunder strikes! Login Unsuccessful. Please check Email and Password")
    return render_template("login.html", title="Login", form=form)

------------------------------------------------------------------------------------------------------------------------

                                       *End of PART-3: FORMS AND VALIDATIONS*

************************************************************************************************************************
                                                                                                             21-04-2023
                                       PART-4: DATABASE WITH FLASK-SQLAlchemy
                                                                                                             09:35:30AM
------------------------------------------------------------------------------------------------------------------------

- installing SQLAlchemy
> pip install flask-sqlalchemy

------------------------------------------------------------------------------------------------------------------------
from flask import Flask, render_template, flash, redirect
from form import RegisterForm, LoginForm
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)

app.config["SECRET_KEY"] = "1de386d816c4c0484ffa4e3dc43f21ea"
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite///site.db"

db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), db.unique=True, db.nullable=False)
    email = db.Column(db.String(120), db.unique=True, db.nullable=False)
    image_file = db.Column(db.String(20), nullable=False, default="default.jpg")
    password = db.Column(db.String(20), db.nullable=False)
    posts = db.relationship("Post", backref="author", lazy=True)


    def __repr__(self):
        return f"User('{self.username}', '{self.email}', '{self.image_file}')"


class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    content = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)  # it will automatically set the table
                                                                                 name into lower so User to user and
                                                                                 Post to post

    def __repr__(self):
        return f"Post('{self.title}', '{self.date_posted}')"

------------------------------------------------------------------------------------------------------------------------

- now we can use these models User and Post to create database.

> first you need to check if your in our project directory or not is not change it or else it won't work
- command line

>>> python
>>> from flaskblog import db    # flaskblog is my application and db is the instance of the database i created.
>>> db.create_all()

- This may not work, i got stuck here. Thankfully i got yhe solution from someone in the comments named daniel <3

- As of version SQLAlchemy 3.0 to create your db file you will need to run some commands like this in the shell :

>>> from project import app, db
>>> app.app_context().push()
>>> db.create_all()

- Then the .db file is created in a folder called "Instance" in your project.

------------------------------------------------------------------------------------------------------------------------

- adding User and Post to our database.

>>> from flaskblog import User, Post
>>> user_1 = User(username="srinivas", email="srinivas@gmail.com", password="sunrisers")
>>> user_2 = User(username= "pavan", email="pavan@gmail.com", password="password")

- we didn't specify any id or an image file, since is our primary key it will assign a unique id, and we set a default
  image file if we won't specify that it will take the "default.jpg".

- now we can add the user_1, user_2 to our database.

>>> db.session.add(user_1)
>>> db.session.add(user_2)

- now we can commit the changes all at once

>>> db.session.commit()
- now we committed they should have to be in the database.
- now we can perform some common query

>>> User.query.all()
[User("srinivas", "srinivas@gmail.com", "default.jpg"), User("pavan", "pavan@gmail.com","default.jpg")]

>>> User.query.first()
User("srinivas", "srinivas@gmail.com", "default.jpg")

>>> User.query.filter_by(username="srinivas").all()
User("srinivas", "srinivas@gmail.com", "default.jpg")

>>> User.query.filter_by(username="srinivas").first()
User("srinivas", "srinivas@gmail.com", "default.jpg")

>>> user = User.query.filter_by(username="srinivas").first()
>>> user
User("srinivas", "srinivas@gmail.com", "default.jpg")

>>> user.id
1
>>> user = User.query.get(1)
>>> user
User("srinivas", "srinivas@gmail.com", "default.jpg")

>>> user.posts
[]
>>>user.id
1
>>> post_1 = Post(title="Blog 1", content="First Post Content!", user_id=user.id)
>>> post_2 = Post(title="Blog 2", content="Second Post Content!", user_id=user.id)

>>> db.session.add(post_1)
>>> db.session.add(post_2)
>>> db.commit()

>>>user.posts
[Post('Blog1', '2023-04-21 12:49:06.421641'), Post('Blog2', '2023-04-21 12:49:06.421641')]
>>> for post in posts:
        print(post.title)

Blog 1
Blog 2

>>> post = Post.query.first()
>>>post

Post('Blog1', '2023-04-21 12:49:06.421641')
>>> post.user_id
1
>>> post.author
>>> User('srinu', 'srinivas@gmail.com', 'default.jpg')

>>> db.drop_all()
>>> db.create_all()
>>> User.query.all()
[]
>>> Post.query.all()
[]

------------------------------------------------------------------------------------------------------------------------

                                       *End of PART-4: DATABASE with SQLAlchemy*

************************************************************************************************************************
                                                                                                             22-04-2023
                                              PART-5: PACKAGE STRUCTURE
                                                                                                             09:00:40AM
------------------------------------------------------------------------------------------------------------------------

- create a new fie called models in the main application.
- models.py

- now move the models User and Post from the flaskblog.py to models.py
- now import db and datetime module.
> from flaskblog import db
> from datatime import datetime

- now we restructure our project
- first create a folder with same name as our main application
- flaskblog
- now move all the file into this file
- folders = static, templates
- files = forms.py, models.py

************************************************************************************************************************

- now create a new file __init__.py this will be our package
- now move
from flask import Flask, render_template, url_for, flash, redirect
from flask_sqlalchemy import SQLAlchemy
from forms import RegistrationForm, LoginForm

app = Flask(__name__)    # app is a WSGI application (Web Server Gateway Interface)
                         # __name__ is a name of the application’s module or package.

app.config["SECRET_KEY"] = "xxxx86d816c4c0484ffa4e3dc43fxxxx"  # this is used for protection from the treats.
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///site.db"
db = SQLAlchemy(app)

************************************************************************************************************************

- create a new file for routes.py for all th routes
from models import User, Post

posts = [
    {
        "author": "Srinivasu Koda",
        "title": "Blog Post 1",
        "content": "This is my first post",
        "date": "June 30, 2023",
        "contact": 906910000
    },
    {
        "author": "Naga Pavan",
        "title": "Blog Post 2",
        "content": "This is my second post",
        "date": "July 23, 2023",
        "contact": 9398809893
    }
]


@app.route("/")
@app.route("/home")
def home():
    return render_template("home.html", posts=posts)


@app.route("/about")
def about():
    return render_template("about.html", title="About")


@app.route("/register", methods=["GET", "POST"])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        flash(f"Welcome to Thunder ⚡  {form.username.data}!  We're thrilled to have you join us!", "success")
        return redirect(url_for("home"))
    return render_template("register.html", title="Register", form=form)


@app.route("/login", methods=["GET", "POST"])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        if form.email.data == "nagapavan@gmail.com" and form.password.data == "password":
            flash(f" I just sensed the weather is changing. Maybe the God Of Thunder ⚡ has arrived! Enjoy your stay.", "success")
            return redirect(url_for("home"))
        else:
            flash(f"⚠ Thunder Strikes! Login Unsuccessful. Please check Email and Password", "danger")
    return render_template("login.html", tilte="Login", form=form)

************************************************************************************************************************

- now only thing that remains in our flaskblog.py is
 if __name__ == "__main__":
    app.run(debug=True)

- now for make it run we can import app from flaskblog package
from flaskblog import app

if __name__ == "__main__":
    app.run(debug=True)

- now we can rename this as run.py so that we can avoid confusion

************************************************************************************************************************

- refactored all th project
- create a new directory named flaskblog

------------------------------------------------------------------------------------------------------------------------

_ now create a python file __init__.py
from flask import Flask
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)  # app is a WSGI application (Web Server Gateway Interface)
# __name__ is a name of the application’s module or package.

app.config["SECRET_KEY"] = "xxxx86d816c4c0484ffa4e3dc43fxxxx"  # this is used for protection from the treats.
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///site.db"
db = SQLAlchemy(app)

from flaskblog import routes

------------------------------------------------------------------------------------------------------------------------

- move everything except run.py into that folder flaskblog.py

- static: main.css
- templates: about.html, home.html, layout.html, login.html, register.html.
- __init__.py: mentioned above

------------------------------------------------------------------------------------------------------------------------

- forms.py
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, BooleanField
from wtforms.validators import DataRequired, Length, Email, equal_to


class RegistrationForm(FlaskForm):
    username = StringField("Username", validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField("Email",  validators=[DataRequired(), Email()])
    password = PasswordField("Password", validators=[DataRequired()])
    confirm_password = PasswordField("Confirm Password", validators=[DataRequired(), equal_to("password")])
    submit = SubmitField("Sign Up")


class LoginForm(FlaskForm):
    email = StringField("Email", validators=[DataRequired(), Email()])
    password = PasswordField("Password", validators=[DataRequired()])
    remember = BooleanField("Remember Me")
    submit = SubmitField("Login")

------------------------------------------------------------------------------------------------------------------------

- models.py
from datetime import datetime
from flaskblog import db
#


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    image_file = db.Column(db.String(20), nullable=False, default="default.jpg")
    password = db.Column(db.String(60), nullable=False)
    posts = db.relationship("Post", backref="author", lazy=True)

    def __repr__(self):
        return f"User('{self.username}', '{self.email}', '{self.image_file}')"


class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    content = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)

    def __repr__(self):
        return f"Post('{self.title}', '{self.date_posted}')"

------------------------------------------------------------------------------------------------------------------------

- routes.py
from flask import render_template, url_for, flash, redirect
from flaskblog import app
from flaskblog.forms import RegistrationForm, LoginForm
from flaskblog.models import User, Post

posts = [
    {
        "author": "Srinivasu Koda",
        "title": "Blog Post 1",
        "content": "This is my first post",
        "date": "June 30, 2023",
        "contact": 906910000
    },
    {
        "author": "Naga Pavan",
        "title": "Blog Post 2",
        "content": "This is my second post",
        "date": "July 23, 2023",
        "contact": 9398809893
    }
]


@app.route("/")
@app.route("/home")
def home():
    return render_template("home.html", posts=posts)


@app.route("/about")
def about():
    return render_template("about.html", title="About")


@app.route("/register", methods=["GET", "POST"])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        flash(f"Welcome to Thunder ⚡  {form.username.data}!  We're thrilled to have you join us!", "success")
        return redirect(url_for("home"))
    return render_template("register.html", title="Register", form=form)


@app.route("/login", methods=["GET", "POST"])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        if form.email.data == "nagapavan@gmail.com" and form.password.data == "password":
            flash(f" I just sensed the weather is changing. Maybe the God Of Thunder ⚡ has arrived! Enjoy your stay.", "success")
            return redirect(url_for("home"))
        else:
            flash(f"⚠ Thunder Strikes! Login Unsuccessful. Please check Email and Password", "danger")
    return render_template("login.html", tilte="Login", form=form)

------------------------------------------------------------------------------------------------------------------------

- instance: site.db

------------------------------------------------------------------------------------------------------------------------

                                       *End of PART-5: PACKAGE STRUCTURE*

************************************************************************************************************************
                                                                                                             23-04-2023
                                              PART-6: USER LOGIN SYSTEM
                                                                                                             10:00:40AM
------------------------------------------------------------------------------------------------------------------------

- hashing passwords with bcrypt (flask-bcrypt)
- pip install flask-bcrypt

------------------------------------------------------------------------------------------------------------------------

- in the command line
- python

>>> from flask_bcrypt import Bcrypt
>>> bcrypt = Bcrypt()

>>> bcrypt.generate_password_hash("testing")
b'$2b$12$T8coNlH0nZHbwtRcnev5d./1rm/w.qPxFePlz/N7sj24zaNue7Pl.'  # b represents this is in bytes

>>> bcrypt.generate_password_hash("testing").decode("utf-8")
'$2b$12$vxP36uO9E6Z4abIjPeGb6O4ORPP4eW3mGXFo0f63e4fJxADmS5hdC'   # now the b has been removed

------------------------------------------------------------------------------------------------------------------------

- each time we run this we will get the different type of passwords.
- if its different hash everytime how can we verify if it's our correct passwords.
- inorder to do that we need another method called check_password_hash()

>>> hashed_pw = bcrypt.generate_password_hash("testing").decode("utf-8")
>>> bcrypt.check_password_hash(hashed_pw,"password")
False
>>> bcrypt.check_password_hash(hashed_pw,"testing")
True
>>> exit()
- This is how we hash and verify our passwords

------------------------------------------------------------------------------------------------------------------------

- now we add this to our app initialization
- __init__.py
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt

app = Flask(__name__)  # app is a WSGI application (Web Server Gateway Interface)
# __name__ is a name of the application’s module or package.

app.config["SECRET_KEY"] = "xxxx86d816c4c0484ffa4e3dc43fxxxx"  # this is used for protection from the treats.
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///site.db"
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)

from flaskblog import routes

------------------------------------------------------------------------------------------------------------------------

- routes.py

- first we need to import it to our routes.py

from flaskblog import db, bcrypt

@app.route("/register", methods=["GET", "POST"])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode("utf-8")
        user = User(username=form.username.data, email=form.email.data, password=hashed_password)
        db.session.add(user)
        db.session.commit()
        flash(f"Your account has been created! You are now able to log in", "success")
        return redirect(url_for("login"))
    return render_template("register.html", title="Register", form=form)

------------------------------------------------------------------------------------------------------------------------

- now we can make sure that the user has been added to our database of not.
- coming to the command line
- python
>>> from flaskblog import app, db
>>> from flaskblog.models import User
>>> app.app_context().push()
>>> user = User.query.first()
>>> user
User('Srinivas', 'srinivas@gmail.com', 'default.jpg')
>>> user.password
'$2b$12$V0HN6spSvsFb.rShfROo9u9TvwiNP9iy3asMwaJG99OH0W53WndK6'
>>> user.email
srinivas@gmail.com
>>> user.username
Srinivas
>>> exit()

------------------------------------------------------------------------------------------------------------------------

- if any error has thrown in the website then we can debug it with debug pin which will be given in the run.
- now copy and paste it in the debugger on the site.
- now we can run python code with in our browser to see the context of what the variables are at this point.

------------------------------------------------------------------------------------------------------------------------

- now we have to validate if the username, email is already exits.
- for that we can create two methods validate_username, validate_email in forms.py

------------------------------------------------------------------------------------------------------------------------

- form.py

from wtforms.validators import DataRequired, Length, Email, equal_to, ValidationError

class RegistrationForm(FlaskForm):
    username = StringField("Username", validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField("Email",  validators=[DataRequired(), Email()])
    password = PasswordField("Password", validators=[DataRequired()])
    confirm_password = PasswordField("Confirm Password", validators=[DataRequired(), equal_to("password")])
    submit = SubmitField("Sign Up")

    def validate_username(self, username):

        user = User.query.filter_by(username=username.data).first()
        if user:
            raise ValidationError("That username is taken. Please choose a different one.")

    def validate_email(self, email):

        user = User.query.filter_by(email=email.data).first()
        if user:
            raise ValidationError("That email is taken. Please choose a different one.")

------------------------------------------------------------------------------------------------------------------------

- now we have to create a login system for this we have to install flask extension called flask-login which will make
  easy to manage login sessions.

- pip install flask-login

- now we add this extension to our __init__.py

------------------------------------------------------------------------------------------------------------------------

from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager

app = Flask(__name__)  # app is a WSGI application (Web Server Gateway Interface)
# __name__ is a name of the application’s module or package.

app.config["SECRET_KEY"] = "1de386d816c4c0484ffa4e3dc43f21ea"  # this is used for protection from the treats.
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///site.db"
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)

from flaskblog import routes

------------------------------------------------------------------------------------------------------------------------

- now the way this work is adding some additional functionalities to our database models and it will handle will the
  sessions for us.

- now open models.py

------------------------------------------------------------------------------------------------------------------------

- models.py
from datetime import datetime
from flaskblog import db, login_manager
from flask_login import UserMixin


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))


class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    image_file = db.Column(db.String(20), nullable=False, default="default.jpg")
    password = db.Column(db.String(60), nullable=False)
    posts = db.relationship("Post", backref="author", lazy=True)

    def __repr__(self):
        return f"User('{self.username}', '{self.email}', '{self.image_file}')"


class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    content = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)

    def __repr__(self):
        return f"Post('{self.title}', '{self.date_posted}')"

------------------------------------------------------------------------------------------------------------------------

- now modify our login route

- routes.py

------------------------------------------------------------------------------------------------------------------------

@app.route("/login", methods=["GET", "POST"])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and bcrypt.check_password_hash(user.password, form.password.data):
            login_user(user, remember=form.remember.data)
            next_page = request.args.get("next")
            return redirect(next_page) if next_page else redirect(url_for("home"))
        else:
            flash(f"⚠ Thunder Strikes! Login Unsuccessful. Please check Email and Password", "danger")
    return render_template("login.html", tilte="Login", form=form)

------------------------------------------------------------------------------------------------------------------------

- if a user is logged in then they shouldn't see the login and register links in the navigation bar now we have to fix it
- we can use the current_user variable

------------------------------------------------------------------------------------------------------------------------

- routes.py

from flask_login import login_user, current_user, logout_user

@app.route("/register", methods=["GET", "POST"])
def register():
    if current_user.is_authenticated:
        return redirect(url_for("home"))
    form = RegistrationForm()
    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode("utf-8")
        user = User(username=form.username.data, email=form.email.data, password=hashed_password)
        db.session.add(user)
        db.session.commit()
        flash(f"Your account has been created! You are now able to log in", "success")
        return redirect(url_for("login"))
    return render_template("register.html", title="Register", form=form)


@app.route("/login", methods=["GET", "POST"])
def login():
    if current_user.is_authenticated:
        return redirect(url_for("home"))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and bcrypt.check_password_hash(user.password, form.password.data):
            login_user(user, remember=form.remember.data)
            return redirect(url_for("home"))
        else:
            flash(f"⚠ Thunder Strikes! Login Unsuccessful. Please check Email and Password", "danger")
    return render_template("login.html", tilte="Login", form=form)

------------------------------------------------------------------------------------------------------------------------

- creating logout and account routes

@app.route("/logout")
def logout():
    logout_user()
    return redirect(url_for("home"))

------------------------------------------------------------------------------------------------------------------------
- we also want to see this in our navigation bar so we to add this to our layout template where navigation is created.

<div class="navbar-nav">
  {% if current_user.is_authenticated %}
    <a class="nav-item nav-link border-color rounded text-dark mr-2" href="{{ url_for('logout') }}">Logout</a>
  {% else %}
    <a class="nav-item nav-link border-color rounded text-dark mr-2" href="{{ url_for('login') }}">Login</a>
    <a class="nav-item nav-link border-color rounded text-dark " href="{{ url_for('register') }}">Register</a>
  {% endif %}
</div>

------------------------------------------------------------------------------------------------------------------------

- now we have to put some restrictions to certain pages so that if the user try to access some page which should be only
  accessible only after login.

- create account route
@app.route("/account")
def account():
    return render_template("account.html", title="Account")

------------------------------------------------------------------------------------------------------------------------

- create a account template in templates
- account.html

{% extends "layout.html" %}
{% block content %}
    <h1>{{ current_user.username }}</h1>
{% endblock content %}

------------------------------------------------------------------------------------------------------------------------

- now adding check to access the account page the user must log in.
- to do this we can use login required decorator from flask-login extension.

- routes.py

from flask_login import login_user, current_user, logout_user, login_required

@app.route("/account")
@login_required
def account():
    return render_template("account.html", title="Account")

------------------------------------------------------------------------------------------------------------------------
- now we need to till to that extension where our login routes are located.
- to do this we need to go back to init.py

- __init__.py

from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager

app = Flask(__name__)  # app is a WSGI application (Web Server Gateway Interface)
# __name__ is a name of the application’s module or package.

app.config["SECRET_KEY"] = "1de386d816c4c0484ffa4e3dc43f21ea"  # this is used for protection from the treats.
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///site.db"
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = "login"
login_manager.login_message_category = 'warning'

from flaskblog import routes

------------------------------------------------------------------------------------------------------------------------

- when we tried to access to account page it redirected us to the login page, but after we login it first redirected us
  to home page, and we had to access the account page from their, so it will noice if it redirects us to the page that
  we tried to access before login.

------------------------------------------------------------------------------------------------------------------------

- routes.py
from flask import render_template, url_for, flash, redirect, request

@app.route("/login", methods=["GET", "POST"])
def login():
    if current_user.is_authenticated:
        return redirect(url_for("home"))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and bcrypt.check_password_hash(user.password, form.password.data):
            login_user(user, remember=form.remember.data)
            next_page = request.args.get("next")
            return redirect(next_page) if next_page else redirect(url_for("home"))
        else:
            flash(f"⚠ Thunder Strikes! Login Unsuccessful. Please check Email and Password", "danger")
    return render_template("login.html", title="Login", form=form)

------------------------------------------------------------------------------------------------------------------------

                                       *End of PART-6: USER LOGIN SYSTEM*

************************************************************************************************************************
                                                                                                             24-04-2023
                                      PART-7: User Account and Profile Picture
                                                                                                             8:30:40AM
------------------------------------------------------------------------------------------------------------------------

- creating account template
- account.html
{% extends "layout.html" %}
{% block content %}
    <div class="content-section">
      <div class="media">
        <img class="rounded-circle account-img" src="userimage.jpg">
        <div class="media-body">
          <h2 class="account-heading">{{ current_user.username }}</h2>
          <p class="text-secondary">{{ current_user.email }}</p>
        </div>
      </div>

    </div>
{% endblock content %}

------------------------------------------------------------------------------------------------------------------------

- create a directory named profile pics, and download default profile pic send it to this directory.
- now add this directory to static directory in our project where "main.css" file present.

------------------------------------------------------------------------------------------------------------------------

- now update the hard coded image to our account template.
- first we need to set it iin our routes and pass it to the account template.

------------------------------------------------------------------------------------------------------------------------

- routes.py
@app.route("/account")
@login_required
def account():
    image_file = url_for("static", filename="profile_pics/" + current_user.image_file)
    return render_template("account.html", title="Account", image_file=image_file)

------------------------------------------------------------------------------------------------------------------------

- account.html
{% extends "layout.html" %}
{% block content %}
    <div class="content-section">
      <div class="media">
        <img class="rounded-circle account-img" src="{{ image_file }}">
        <div class="media-body">
          <h2 class="account-heading">{{ current_user.username }}</h2>
          <p class="text-secondary">{{ current_user.email }}</p>
        </div>
      </div>

    </div>
{% endblock content %}

------------------------------------------------------------------------------------------------------------------------

- now we need to account form page
- forms.py

class UpdateAccountForm(FlaskForm):
    username = StringField("Username", validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField("Email",  validators=[DataRequired(), Email()])
    submit = SubmitField("Update")

    def validate_username(self, username):
        if username.data != current_user.username:
            user = User.query.filter_by(username=username.data).first()
            if user:
                raise ValidationError("That username is taken. Please choose a different one.")

    def validate_email(self, email):
        if email.data != current_user.email:
            user = User.query.filter_by(email=email.data).first()
            if user:
                raise ValidationError("That email is taken. Please choose a different one.")

------------------------------------------------------------------------------------------------------------------------

- routes.py

@app.route("/account")
@login_required
def account():
    form = UpdateAccountForm()
    image_file = url_for("static", filename="profile_pics/" + current_user.image_file)
    return render_template("account.html", title="Account", image_file=image_file, form=form)

------------------------------------------------------------------------------------------------------------------------

- now grab the registrations template and use them to create account template.
- account.html

{% extends "layout.html" %}
{% block content %}
    <div class="content-section">
      <div class="media">
        <img class="rounded-circle account-img" src="{{ image_file }}">
        <div class="media-body">
          <h2 class="account-heading">{{ current_user.username }}</h2>
          <p class="text-secondary">{{ current_user.email }}</p>
        </div>
      </div>
        <form method="POST" action="">
            {{ form.hidden_tag() }}
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Account Info</legend>
                <div class="form-group">
                    {{ form.username.label(class="form-control-label") }}
                    {% if form.username.errors %}
                        {{ form.username(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.username.errors%}
                            <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{ form.username(class="form-control form-control-lg") }}
                    {% endif%}
                </div>
                <div class="form-group">
                    {{ form.email.label(class="form-control-label") }}
                    {% if form.email.errors %}
                        {{ form.email(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.email.errors%}
                            <span>{{ error }}</span>
                            {% endfor %}
                        </div>passwordconfirm_password
                    {% else %}
                        {{ form.email(class="form-control form-control-lg") }}
                    {% endif%}
                </div>
            </fieldset>
            <div class="form-group">
                {{ form.submit(class="btn border rounded btn-outline-warning") }}
            </div>
        </form>
    </div>
{% endblock content %}

------------------------------------------------------------------------------------------------------------------------

- when we open the account page we want to auto fill the username and email.

- routes.py
@app.route("/account", methods=["GET", "POST"])
@login_required
def account():
    form = UpdateAccountForm()
    if form.validate_on_submit():
        current_user.username = form.username.data
        current_user.email = form.email.data
        db.session.commit()
        flash(f"Your account has been updated!", "success")
        return redirect(url_for("account"))
    elif request.method == "GET":
        form.username.data = current_user.username
        form.email.data = current_user.email
    image_file = url_for("static", filename="profile_pics/" + current_user.image_file)
    return render_template("account.html", title="Account", image_file=image_file, form=form)

------------------------------------------------------------------------------------------------------------------------

- now setting up changing the user profile picture.
- to do that we need to add new field to our form that is input type of file.

------------------------------------------------------------------------------------------------------------------------

- forms.py

from flask_wtf.file import FileField, FileAllowed

class UpdateAccountForm(FlaskForm):
    username = StringField("Username", validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField("Email",  validators=[DataRequired(), Email()])
    picture = FileField("Update Profile Picture", validators=[FileAllowed(["jpg", "png"])])
    submit = SubmitField("Update")

------------------------------------------------------------------------------------------------------------------------

- now we updated our form and now we need to render template
- account.html

{% extends "layout.html" %}
{% block content %}
    <div class="content-section">
      <div class="media">
        <img class="rounded-circle account-img" src="{{ image_file }}">
        <div class="media-body">
          <h2 class="account-heading">{{ current_user.username }}</h2>
          <p class="text-secondary">{{ current_user.email }}</p>
        </div>
      </div>
        <form method="POST" action="" enctype="multipart/form-data">
            {{ form.hidden_tag() }}
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Account Info</legend>
                <div class="form-group">
                    {{ form.username.label(class="form-control-label") }}
                    {% if form.username.errors %}
                        {{ form.username(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.username.errors%}
                            <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{ form.username(class="form-control form-control-lg") }}
                    {% endif%}
                </div>
                <div class="form-group">
                    {{ form.email.label(class="form-control-label") }}
                    {% if form.email.errors %}
                        {{ form.email(class="form-control form-control-lg is-invalid") }}
                        <div class="invalid-feedback">
                            {% for error in form.email.errors%}
                                <span>{{ error }}</span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{ form.email(class="form-control form-control-lg") }}
                    {% endif%}
                </div>
                 <div class="form-group">
                    {{ form.picture.label() }}
                    {{ form.picture(class="form-control-file") }}
                    {% if form.picture.errors %}
                        {% for error in form.picture.errors%}
                                <span class="text-danger">{{ error }}</span></br>
                        {% endfor %}
                    {%  endif %}
                 </div>
            </fieldset>
            <div class="form-group">
                {{ form.submit(class="btn border rounded btn-outline-warning") }}
            </div>
        </form>
    </div>
{% endblock content %}

------------------------------------------------------------------------------------------------------------------------

- now lets add logic to our route to actually update our profile picture
- routes.py

@app.route("/account", methods=["GET", "POST"])
@login_required
def account():
    form = UpdateAccountForm()
    if form.validate_on_submit():
        if form.picture.data:
            picture_file = save_picture(form.picture.data)
            current_user.image_file = picture_file
        current_user.username = form.username.data
        current_user.email = form.email.data
        db.session.commit()
        flash(f"Your account has been updated!", "success")
        return redirect(url_for("account"))
    elif request.method == "GET":
        form.username.data = current_user.username
        form.email.data = current_user.email
    image_file = url_for("static", filename="profile_pics/" + current_user.image_file)
    return render_template("account.html", title="Account", image_file=image_file, form=form)

------------------------------------------------------------------------------------------------------------------------

- image resizing
- pip install Pillow
- routes.py

from PIL import Image

def save_picture(form_picture):
    random_hex = secrets.token_hex(8)
    _, f_ext = os.path.splitext(form_picture.filename)
    picture_fn = random_hex + f_ext
    picture_path = os.path.join(app.root_path, 'static/profile_pics', picture_fn)

    output_size = (125, 125)
    i = Image.open(form_picture)
    i.thumbnail(output_size)
    i.save(picture_path)

    return picture_fn

------------------------------------------------------------------------------------------------------------------------

                                    *End of PART-7: User Account and Profile Picture*

************************************************************************************************************************





